IBM$StockPrice[301:432],
col = "black")
lines(Boeing$Date[301:432],
Boeing$StockPrice[301:432],
col = "orange")
abline(v=as.Date(c("1997-09-01")), lwd=2)
abline(v=as.Date(c("1997-11-01")), lwd=2)
?months
tapply(IBM$StockPrice, months(IBM$Date))
tapply(IBM$StockPrice, months(IBM$Date), mean)
mean(IBM$StockPrice)
tapply(IBM$StockPrice, months(IBM$Date), mean) > mean(IBM$StockPrice)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
tapply(GE$StockPrice, months(GE$Date), mean)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
which.max(tapply(GE$StockPrice, months(GE$Date), mean))
which.max(tapply(CocaCola$StockPrice, months(CocaCola$Date), mean))
tapply(GE$StockPrice, months(GE$Date), mean)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
tapply(IBM$StockPrice, months(IBM$Date), mean)
tapply(Boeing$StockPrice, months(Boening$Date), mean)
tapply(ProcterGamble$StockPrice, months(ProcterGamble$Date), mean)
tapply(GE$StockPrice, months(GE$Date), mean)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
tapply(IBM$StockPrice, months(IBM$Date), mean)
tapply(Boeing$StockPrice, months(Boeing$Date), mean)
tapply(ProcterGamble$StockPrice, months(ProcterGamble$Date), mean)
CPS <- read.csv('CPSData.csv')
str(CPS)
table(CPS$Industry)
sort(table(CPS$Industry), decreasing = TRUE)[1]
sort(table(CPS$Region), decreasing = TRUE)
sort(table(CPS$State), decreasing = TRUE)
sort(table(CPS$State))[1]
sort(table(CPS$State), decreasing = TRUE)[1]
table(CPS$Citizenship)
prop.table(CPS$Citizenship, 1)
prop.table(CPS$Citizenship)
prop.table(table(CPS$Citizenship))
prop.table(table(CPS$Citizenship), 1)
prop.table(table(CPS$Citizenship))
prop.table(table(CPS$Citizenship))[1]
prop.table(table(CPS$Citizenship))[1] + prop.table(table(CPS$Citizenship))[2]
table(CPS$Race, CPS$Hispanic)
sapply(CPS, function(x) any(is.na(x))
)
sapply(CPS, function(x) any(is.na(x)))
?tapply
table(CPS$Region, is.na(CPS$Married))
table(CPS$Citizenship, is.na(CPS$Married))
table(CPS$Region, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
table(CPS$Citizenship, is.na(CPS$Married))
table(CPS$State, is.na(CPS$MetroAreaCode))
table(CPS$Region, CPS$MetroAreaCode)
table(CPS$Region, isna(CPS$MetroAreaCode))
table(CPS$Region, is.na(CPS$MetroAreaCode))
prop.table(table(CPS$Region, is.na(CPS$MetroAreaCode)), 1)
tapply(CPS$State, is.na(CPS$MetroAreaCode))
tapply(CPS$State, is.na(CPS$MetroAreaCode), mean)
tapply(CPS$State, is.na(CPS$MetroAreaCode), mean, rm.na = TRUE)
table(CPS$State, is.na(CPS$MetroAreaCode))
prop.table(table(CPS$State, is.na(CPS$MetroAreaCode)))
prop.table(table(CPS$State, is.na(CPS$MetroAreaCode)), 1)
MetroAreaMap <- read.csv('MetroAreaCodes.csv')
CountryMap <- read.csv('CountryCodes.csv')
View(MetroAreaMap)
View(CountryMap)
nrow(MetroAreaMap)
nrow(CountryMap)
CPS <- merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
?merg
?merge
str(CPS)
View(MetroAreaMap)
table(is.na(CPS$MetroArea))
sort(table(CPS$MetroArea), decreasing = TRUE)[1]
sort(table(CPS$MetroArea), decreasing = TRUE)
sort(table(CPS$MetroArea), decreasing = TRUE)[c("Atlanta-Sandy Springs-Marietta, GA", "Baltimore-Towson, MD", "oston-Cambridge-Quincy, MA-NH", "San Francisco-Oakland-Fremont, CA")]
sort(table(CPS$MetroArea), decreasing = TRUE)
[c("Atlanta-Sandy Springs-Marietta, GA", "Baltimore-Towson, MD", "oston-Cambridge-Quincy, MA-NH", "San Francisco-Oakland-Fremont, CA")]
metro_areas <- c("Atlanta-Sandy Springs-Marietta, GA",
"Baltimore-Towson, MD",
"Boston-Cambridge-Quincy, MA-NH",
"San Francisco-Oakland-Fremont, CA")
sort(table(CPS$MetroArea), decreasing = TRUE)[metro_areas]
table(CPS$MetroArea, CPS$Hispanic)
tapply(CPS$MetroArea, CPS$Hispanic, mean)
prop.table(table(CPS$MetroArea, CPS$Hispanic), 1)
max(prop.table(table(CPS$MetroArea, CPS$Hispanic), 1))
prop.table(table(CPS$MetroArea, CPS$Hispanic), 1)[1]
prop.table(table(CPS$MetroArea, CPS$Hispanic), 1)[,1]
max(prop.table(table(CPS$MetroArea, CPS$Hispanic), 1)[,1])
sort(prop.table(table(CPS$MetroArea, CPS$Hispanic), 1)[,1])
sort(prop.table(table(CPS$MetroArea, CPS$Hispanic), 1)[,0])
sort(prop.table(table(CPS$MetroArea, CPS$Hispanic), 1)[,2])
subset(CPS, CPS$Race == "Asian")
table(subset(CPS, CPS$Race == "Asian")$MetroArea)
CPS$Race == 'Asian'
subset(CPS, CPS$Race == 'Asian')
table(subset(CPS, CPS$Race == 'Asian')$MetroArea)
table(CPS$Race, CPS$MetroArea)
table(subset(CPS, CPS$Race == 'Asian')$MetroArea)
table(subset(CPS, CPS$Race == 'Asian')
table(subset(CPS, CPS$Race == 'Asian'))
table(subset(CPS, CPS$Race == 'Asian'))
(subset(CPS, CPS$Race == 'Asian'))
table(CPS$MetroArea, CPS$Race, sum)
tapply(CPS$MetroArea, CPS$Race, sum)
tapply(CPS$MetroArea, CPS$Race == 'Asian', sum)
tapply(CPS$Race == 'Asian', CPS$MetroArea, sum)
tapply(CPS$Race == 'Asian' / CPS$Race != 'Asian', CPS$MetroArea, sum)
tapply((CPS$Race == 'Asian') / (CPS$Race != 'Asian'), CPS$MetroArea, sum)
sum(CPS$Race == 'Asian')
table(CPS$Race == 'Asian', CPS$MetroArea)
prop.table(table(CPS$Race == 'Asian', CPS$MetroArea), 0)
prop.table(table(CPS$Race == 'Asian', CPS$MetroArea), 1)
prop.table(table(CPS$Race == 'Asian', CPS$MetroArea))
prop.table(table(CPS$Race == 'Asian', CPS$MetroArea), 1)
prop.table(table(CPS$Race == 'Asian', CPS$MetroArea), 1)[2]
prop.table(table(CPS$Race == 'Asian', CPS$MetroArea), 1)[,2]
prop.table(table(CPS$Race == 'Asian', CPS$MetroArea), 1)[2,]
prop.table(table(CPS$Race == 'Asian', CPS$MetroArea), 1)[2,] > .20
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2]
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2] > 20
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2] > .20
sum(prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2] > .20)
sum(prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2][1] > .20)
(prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2][2] > .20
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2][2] > .20
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2][2] > .20
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2]
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2][:] > .20
prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2] > .20
as.vector(prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2]) > .20
sum(as.vector(prop.table(table(CPS$MetroArea, CPS$Race == 'Asian'), 1)[,2]) > .20)
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean))
tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean)
tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm = TRUE)
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm = TRUE))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm = TRUE), decreasing = TRUE)
View(CountryMap)
View(CPS)
CPS <- merge(CPS, CountryMap, by.x="CountryOfBirthCode", by.y="Code", all.x=TRUE)
View(CPS)
View(CPS)
sum(is.na(CPS$Country))
subset(CPS, CPS$Region != 'North America')
View(CPS)
table(CPS$Country)
sort(table(CPS$Country), decreasing = TRUE)
subset(CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')
subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')
subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')$Country != 'United States'
sum(subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')$Country != 'United States', na.rm = TRUE)
sum(subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')$Country != 'United States')
subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')$Country != 'United States'[-is.na]
sum(subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')$Country != 'United States', na.rm = TRUE)
sum(subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')$Country != 'United States', na.rm = TRUE) /
sum(subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')$Country == 'United States', na.rm = TRUE)
table(subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')$Country)
prop.table(table(subset(CPS, CPS$MetroArea == 'New York-Northern New Jersey-Long Island, NY-NJ-PA')$Country))
1 - 0.69133
table(CPS$Country == 'India', CPS$MetroArea)
table(CPS$Country == 'India', CPS$MetroArea)[1]
table(CPS$Country == 'India', CPS$MetroArea)[,1]
table(CPS$MetroArea, CPS$Country == 'India')
table(CPS$MetroArea, CPS$Country == 'India')[2]
table(CPS$MetroArea, CPS$Country == 'India')[,2]
which.max(table(CPS$MetroArea, CPS$Country == 'India')[,2])
which.max(table(CPS$MetroArea, CPS$Country == 'Brazil')[,2])
which.max(table(CPS$MetroArea, CPS$Country == 'Somalia')[,2])
AP <- read.csv('AnonymityPoll.csv')
View(AP)
nrow(AP)
summary(AP$Smartphone)
table(AP$Smartphone)
table(AP$Region, AP$State)
table(subset(AP, Region == 'Midwest')$State)
MidWest_Region <- subset(AP, Region == 'Midwest')
MidWest_Region$State <- factor(MidWest_Region$State)
table(MidWest_Region$State)
South_Region <- subset(AP, Region == 'South')
South_Region <- factor(South_Region$State)
sort(table(South_Region$State), decreasing = TRUE)[1]
South_Region <- subset(AP, Region == 'South')
South_Region <- factor(South_Region$State)
sort(table(South_Region$State), decreasing = TRUE)[1]
sort(table(South_Region), decreasing = TRUE)
South_Region <- subset(AP, Region == 'South')
South_Region <- subset(AP, Region == 'South')
South_Region$State <- factor(South_Region$State)
sort(table(South_Region$State), decreasing = TRUE)
View(South_Region)
table(AP$Internet.Use, AP$Smartphone)
sum(is.na(AP$Internet.Use))
is.na(AP$Internet.Use)
sum(is.na(AP$Smartphone))
limited <- subset(AP, Internet.USE == True | Smartphone == TRUE)
limited <- subset(AP, Internet.Use == True | Smartphone == TRUE)
limited <- subset(AP, Internet.Use == TRUE | Smartphone == TRUE)
nrow(limited)
sapply(limited, function(x) any(is.na(x)))
mean(limited$Info.On.Internet)
nrow(limited[,limited$Info.On.Internet == 0])
nrow(limited[limited$Info.On.Internet == 0])
nrow(limited[limited$Info.On.Internet == 0,])
nrow(limited[limited$Info.On.Internet == 11,])
View(limited)
View(limited)
sum(is.na(limited$Worry.About.Info))
table(limited$Worry.About.Info)
prop.table(table(limited$Worry.About.Info))
prop.table(table(limited$Anonymity.Possible))
prop.table(table(limited$Tried.Masking.Identity))
prop.table(table(limited$Privacy.Laws.Effective))
hist(limited$Age)
plot(limited$Age, limited$Info.On.Internet)
table(limited$Age, limited$Info.On.Internet)
jitter(c(1,2,3))
jitter(c(1,2,3))
jitter(c(1,2,3))
jitter(c(1,2,3))
jitter(c(1,2,3))
plot(jitter(limited$Age), jitter(limited$Info.On.Internet))
tapply(limited$Info.On.Internet, limited$Age, summary)
tapply(limited$Info.On.Internet, limited$Smartphone, summary)
tapply(limited$Tried.Masking.Identity, limited$Smartphone, summary)
setwd("F:/Dropbox/Courses/00 Nanodegree -- Data Analyst/P6 Make Effective Data Visualization/P6-Make-Effective-Data-Visualization")
setwd("F:/Dropbox/Courses/00 Nanodegree -- Data Analyst/P6 Make Effective Data Visualization/P6-Make-Effective-Data-Visualization")
baseball_df <- read.csv('baseball_data.csv')
sapply(baseball_df, class)
baseball_df <- as.character(baseball_df$name)
baseball_df <- read.csv('baseball_data.csv')
sapply(baseball_df, class)
baseball_df$name <- as.character(baseball_df$name)
sapply(baseball_df, class)
View(baseball_df)
baseball_df$height <- as.numeric(baseball_df$height)
View(baseball_df)
View(baseball_df)
baseball_df$weight <- as.numeric(baseball_df$weight)
baseball_df$HR <- as.numeric(baseball_df$HR)
sapply(baseball_df, class)
View(baseball_df)
baseball_df$HR <- as.double(baseball_df$HR)
sapply(baseball_df, class)
baseball_df$HR <- as.double(baseball_df$HR)
View(baseball_df)
baseball_df$HR <- as.numeric(baseball_df$HR)
sapply(baseball_df, class)
write.csv(baseball_df, 'baseball_data_R.csv')
setwd("F:/Dropbox/Courses/00 Nanodegree -- Data Analyst/P6 Make Effective Data Visualization/P6-Make-Effective-Data-Visualization")
baseball_df <- read.csv('baseball_data.csv')
?cut
cut(baseball_df$avg, c(.000, .100, .200, .300))
cut(baseball_df$avg, c(.000, .100, .200, .300), include.lowest = TRUE)
View(baseball_df)
cut(baseball_df$avg, c(-Inf, .100, .200, Inf), include.lowest = TRUE)
cut(baseball_df$avg, c(-Inf, .100, .200, Inf), include.lowest = TRUE, labels = c(".000 - .100", ".101 - .200", ".201 - .300", "> .300"))
cut(baseball_df$avg, c(-Inf, .100, .200, , .300, Inf), include.lowest = TRUE, labels = c(".000 - .100", ".101 - .200", ".201 - .300", "> .300"))
cut(baseball_df$avg, c(-Inf, .100, .200,.300, Inf), include.lowest = TRUE, labels = c(".000 - .100", ".101 - .200", ".201 - .300", "> .300"))
View(baseball_df)
baseball_df$avg_cat <- cut(baseball_df$avg, c(-Inf, .100, .200,.300, Inf), include.lowest = TRUE, labels = c(".000 - .100", ".101 - .200", ".201 - .300", "> .300"))
View(baseball_df)
summary(baseball_df$weight)
cut(baseball_df$weight, c(-Inf, seq(140, 245,5), include.lowest = TRUE)
cut(baseball_df$weight, c(-Inf, seq(140, 245,5), include.lowest = TRUE))
cut(baseball_df$weight, c(-Inf, seq(140, 245,5), include.lowest = TRUE))
cut(baseball_df$weight, c(seq(140, 245,5), include.lowest = TRUE))
View(baseball_df)
cut(baseball_df$weight, c(seq(140, 245,5), include.lowest = TRUE, labels = c(seq(140, 245,5)))
)
cut(baseball_df$weight, c(seq(140, 245,5)), include.lowest = TRUE)
cut(baseball_df$weight, c(seq(140, 245,5)), include.lowest = TRUE, labels = c(seq(140, 245,5)))
cut(baseball_df$weight, c(seq(140, 245,5)), include.lowest = TRUE, labels = c(seq(140, 240,5)))
cut(baseball_df$weight, c(seq(135, 245,5)), include.lowest = TRUE, labels = c(seq(140, 245,5)))
View(baseball_df)
baseball_df$weight_cat <- cut(baseball_df$weight, c(seq(135, 245,5)), include.lowest = TRUE, labels = c(seq(140, 245,5)))
View(baseball_df)
summary(baseball_df$avg)
baseball_df$weight_cat <- cut(baseball_df$weight, c(seq(135, 245,10)), include.lowest = TRUE, labels = c(seq(140, 245,10)))
baseball_df$weight_cat <- cut(baseball_df$weight, c(seq(135, 245,5)), include.lowest = TRUE, labels = c(seq(140, 245,5)))
View(baseball_df)
View(baseball_df)
lut <- c("R" = "Right", "L" = "Left", "B" = "Switch")
baseball_df$handedness <- lut[baseball_df$handedness]
View(baseball_df)
baseball_df <- read.csv('baseball_data.csv')
View(baseball_df)
lut <- c("R" = "Right", "L" = "Left", "B" = "Switch")
baseball_df$batting <- lut[baseball_df$handedness]
View(baseball_df)
lut <- c("B" = "Switch", "L" = "Left", "R" = "Right" )
baseball_df$batting <- lut[baseball_df$handedness]
View(baseball_df)
View(baseball_df)
setwd("F:/Dropbox/Courses/00 Nanodegree -- Data Analyst/P6 Make Effective Data Visualization/P6-Make-Effective-Data-Visualization")
baseball_df <- read.csv('baseball_data.csv')
# Add bins for batting average
# .000 - .100
# .101 - .200
# .201 - .300
# > .300
baseball_df$avg_cat <- cut(baseball_df$avg,
c(-Inf, .100, .200,.300, Inf),
include.lowest = TRUE,
labels = c(".000 - .100",
".101 - .200",
".201 - .300",
"> .300"))
summary(baseball_df$weight)
# Add bins for weight
# Weights will be rounded up to the nearest 5 pound increment
# For example, a weight of 182 will be recorded as 185
baseball_df$weight_cat <- cut(baseball_df$weight,
c(seq(135, 245,5)),
include.lowest = TRUE,
labels = c(seq(140, 245,5)))
lut <- c("B" = "Switch", "L" = "Left", "R" = "Right" )
baseball_df$batting <- lut[baseball_df$handedness]
View(baseball_df)
write.csv(baseball_df, 'baseball_data_modified.csv')
?write.csv
write.csv(baseball_df, 'baseball_data_modified.csv', row.names = FALSE)
View(baseball_df)
baseball_df <- read.csv('baseball_data.csv')
baseball_df$avg_cat <- cut(baseball_df$avg,
c(-Inf, .100, .200,.225, .250, .275, .300, Inf),
include.lowest = TRUE,
labels = c(".000 - .100",
".101 - .200",
".201 - .225",
".226 - .250",
".251 - .275",
".276 - .300"
"> .300"))
baseball_df$avg_cat <- cut(baseball_df$avg,
c(-Inf, .100, .200,.225, .250, .275, .300, Inf),
include.lowest = TRUE,
labels = c(".000 - .100",
".101 - .200",
".201 - .225",
".226 - .250",
".251 - .275",
".276 - .300",
"> .300"))
setwd("F:/Dropbox/Courses/00 Nanodegree -- Data Analyst/P6 Make Effective Data Visualization/P6-Make-Effective-Data-Visualization")
baseball_df <- read.csv('baseball_data.csv')
# Add bins for batting average
baseball_df$avg_cat <- cut(baseball_df$avg,
c(-Inf, .100, .200,.225, .250, .275, .300, Inf),
include.lowest = TRUE,
labels = c(".000 - .100",
".101 - .200",
".201 - .225",
".226 - .250",
".251 - .275",
".276 - .300",
"> .300"))
summary(baseball_df$weight)
# Add bins for weight
# Weights will be rounded up to the nearest 5 pound increment
# For example, a weight of 182 will be recorded as 185
baseball_df$weight_cat <- cut(baseball_df$weight,
c(seq(135, 245,5)),
include.lowest = TRUE,
labels = c(seq(140, 245,5)))
lut <- c("B" = "Switch", "L" = "Left", "R" = "Right" )
baseball_df$batting <- lut[baseball_df$handedness]
write.csv(baseball_df, 'baseball_data_modified.csv', row.names = FALSE)
seq(.000, .300, .010)
summary(baseball_df$avg)
seq(.000, .330, .010)
baseball_df$avg_cat <- cut(baseball_df$avg, c(seq(.000, .330, .010)), include.lowest = TRUE)
View(baseball_df)
subset(baseball_df, avg == 0 & HR == 0)
baseball_df <- subset(baseball_df, avg == 0 & HR == 0)
summary(baseball_df$avg)
View(baseball_df)
baseball_df <- subset(baseball_df, avg != 0 & HR != 0)
baseball_df <- subset(baseball_df, avg != 0 | HR != 0)
baseball_df <- subset(baseball_df, !(avg != 0 & HR != 0))
baseball_df <- read.csv('baseball_data.csv')
baseball_df <- subset(baseball_df, !(avg != 0 & HR != 0))
View(baseball_df)
baseball_df <- read.csv('baseball_data.csv')
baseball_df <- subset(baseball_df, (avg != 0 & HR != 0))
View(baseball_df)
summary(baseball_df$avg)
baseball_df$avg_cat <- cut(baseball_df$avg, c(seq(.100, .330, .010)), include.lowest = TRUE)
baseball_df$weight_cat <- cut(baseball_df$weight,
c(seq(135, 245,5)),
include.lowest = TRUE,
labels = c(seq(140, 245,5)))
lut <- c("B" = "Switch", "L" = "Left", "R" = "Right" )
baseball_df$batting <- lut[baseball_df$handedness]
write.csv(baseball_df, 'baseball_data_modified.csv', row.names = FALSE)
setwd("F:/Dropbox/Courses/00 Nanodegree -- Data Analyst/P6 Make Effective Data Visualization/P6-Make-Effective-Data-Visualization")
baseball_df <- read.csv('baseball_data.csv')
# Remove players with .000 avg and 0 HR
baseball_df <- subset(baseball_df, (avg != 0 & HR != 0))
# Add bins for batting average
summary(baseball_df$avg)
baseball_df$avg_cat <- cut(baseball_df$avg,
c(-Inf, .100, .200,.225, .250, .275, .300, Inf),
include.lowest = TRUE,
labels = c(".000 - .100",
".101 - .200",
".201 - .225",
".226 - .250",
".251 - .275",
".276 - .300",
"> .300"))
#baseball_df$avg_cat <- cut(baseball_df$avg, c(seq(.100, .330, .010)), include.lowest = TRUE)
summary(baseball_df$weight)
# Add bins for weight
# Weights will be rounded up to the nearest 5 pound increment
# For example, a weight of 182 will be recorded as 185
baseball_df$weight_cat <- cut(baseball_df$weight,
c(seq(135, 245,5)),
include.lowest = TRUE,
labels = c(seq(140, 245,5)))
lut <- c("B" = "Switch", "L" = "Left", "R" = "Right" )
baseball_df$batting <- lut[baseball_df$handedness]
write.csv(baseball_df, 'baseball_data_modified.csv', row.names = FALSE)
setwd("F:/Dropbox/Courses/00 Nanodegree -- Data Analyst/P6 Make Effective Data Visualization/P6-Make-Effective-Data-Visualization")
baseball_df <- read.csv('baseball_data.csv')
# Remove players with .000 avg and 0 HR
baseball_df <- subset(baseball_df, (avg != 0 & HR != 0))
# Add bins for batting average
summary(baseball_df$avg)
baseball_df$avg_cat <- cut(baseball_df$avg,
c(-Inf, .100, .200, .300, Inf),
include.lowest = TRUE,
labels = c(".000 - .100",
".101 - .200",
".201 - .300",
"> .300"))
#baseball_df$avg_cat <- cut(baseball_df$avg, c(seq(.100, .330, .010)), include.lowest = TRUE)
summary(baseball_df$weight)
# Add bins for weight
# Weights will be rounded up to the nearest 5 pound increment
# For example, a weight of 182 will be recorded as 185
baseball_df$weight_cat <- cut(baseball_df$weight,
c(seq(135, 245,5)),
include.lowest = TRUE,
labels = c(seq(140, 245,5)))
lut <- c("B" = "Switch", "L" = "Left", "R" = "Right" )
baseball_df$batting <- lut[baseball_df$handedness]
write.csv(baseball_df, 'baseball_data_modified.csv', row.names = FALSE)
summary(baseball_df$avg)
setwd("F:/Dropbox/Courses/00 Nanodegree -- Data Analyst/P6 Make Effective Data Visualization/P6-Make-Effective-Data-Visualization")
baseball_df <- read.csv('baseball_data.csv')
# Remove players with .000 avg and 0 HR
baseball_df <- subset(baseball_df, (avg != 0 & HR != 0))
# Add bins for batting average
summary(baseball_df$avg)
# baseball_df$avg_cat <- cut(baseball_df$avg,
#                            c(-Inf, .100, .200, .300, Inf),
#                            include.lowest = TRUE,
#                            labels = c(".000 - .100",
#                                       ".101 - .200",
#                                       ".201 - .300",
#                                       "> .300"))
baseball_df$avg_cat <- cut(baseball_df$avg,
c(seq(.100, .330, .025)),
include.lowest = TRUE)
#baseball_df$avg_cat <- cut(baseball_df$avg, c(seq(.100, .330, .010)), include.lowest = TRUE)
summary(baseball_df$weight)
# Add bins for weight
# Weights will be rounded up to the nearest 5 pound increment
# For example, a weight of 182 will be recorded as 185
baseball_df$weight_cat <- cut(baseball_df$weight,
c(seq(135, 245,5)),
include.lowest = TRUE,
labels = c(seq(140, 245,5)))
lut <- c("B" = "Switch", "L" = "Left", "R" = "Right" )
baseball_df$batting <- lut[baseball_df$handedness]
write.csv(baseball_df, 'baseball_data_modified.csv', row.names = FALSE)
View(baseball_df)
setwd("F:/Dropbox/Courses/00 Nanodegree -- Data Analyst/P6 Make Effective Data Visualization/P6-Make-Effective-Data-Visualization")
baseball_df <- read.csv('baseball_data.csv')
# Remove players with .000 avg and 0 HR
baseball_df <- subset(baseball_df, (avg != 0 & HR != 0))
# Add bins for batting average
summary(baseball_df$avg)
# baseball_df$avg_cat <- cut(baseball_df$avg,
#                            c(-Inf, .100, .200, .300, Inf),
#                            include.lowest = TRUE,
#                            labels = c(".000 - .100",
#                                       ".101 - .200",
#                                       ".201 - .300",
#                                       "> .300"))
baseball_df$avg_cat <- cut(baseball_df$avg,
c(seq(.100, .350, .025)),
include.lowest = TRUE)
#baseball_df$avg_cat <- cut(baseball_df$avg, c(seq(.100, .330, .010)), include.lowest = TRUE)
summary(baseball_df$weight)
# Add bins for weight
# Weights will be rounded up to the nearest 5 pound increment
# For example, a weight of 182 will be recorded as 185
baseball_df$weight_cat <- cut(baseball_df$weight,
c(seq(135, 245,5)),
include.lowest = TRUE,
labels = c(seq(140, 245,5)))
lut <- c("B" = "Switch", "L" = "Left", "R" = "Right" )
baseball_df$batting <- lut[baseball_df$handedness]
write.csv(baseball_df, 'baseball_data_modified.csv', row.names = FALSE)
